version: '3.8'

networks:
  app-net:
    driver: bridge

volumes:
  pgdata1:
  pgdata2:
  rabbitmqdata:
  redisdata:

services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: always
    ports:
      - "80:80"     # public HTTP
      - "443:443"   # public HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=truongkhuong666@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--providers.docker.network=app-net"
      - "--providers.docker.defaultrule=Host(`truongvinhkhuong.io.vn`)"
      - "--log.level=DEBUG"
      - "--accesslog=true"
    networks:
      - app-net
    labels:
      # Dashboard qua HTTPS trÃªn domain + path /dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`truongvinhkhuong.io.vn`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$xyS4ESFe$$9PQfEFKmJtJmOJTYfFTYm0"

  db1:
    image: postgres:15
    container_name: db1
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=midterm-domain1
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - pgdata1:/var/lib/postgresql/data

  db2:
    image: postgres:15
    container_name: db2
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=midterm-domain2
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - pgdata2:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    expose:
      - "5672"
      - "15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

  domain-1:
    build:
      context: ./domain-1
      args:
        - JWT_SECRET=${JWT_SECRET}
        - JWT_EXPIRATION=${JWT_EXPIRATION}
    container_name: domain-1
    restart: always
    expose:
      - "8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db1:5432/midterm-domain1
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SERVER_SERVLET_CONTEXT_PATH=/identity
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SERVER_FORWARD_HEADERS_STRATEGY=FRAMEWORK
      - SERVER_USE_FORWARD_HEADERS=true
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      db1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8081/identity/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.domain-1.rule=Host(`truongvinhkhuong.io.vn`) && PathPrefix(`/identity`)"
      - "traefik.http.routers.domain-1.entrypoints=websecure"
      - "traefik.http.routers.domain-1.tls.certresolver=myresolver"
      - "traefik.http.services.domain-1.loadbalancer.server.port=8081"
      - "traefik.http.middlewares.identity-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.identity-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.identity-cors.headers.accesscontrolallowheaders=Content-Type,Authorization,Origin,Accept"
      - "traefik.http.middlewares.identity-cors.headers.accesscontrolmaxage=3600"
      - "traefik.http.middlewares.identity-cors.headers.addvaryheader=true"
      - "traefik.http.routers.domain-1.middlewares=identity-cors"

  domain-2:
    build:
      context: ./domain-2
      args:
        - JWT_SECRET=${JWT_SECRET}
        - JWT_EXPIRATION=${JWT_EXPIRATION}
    container_name: domain-2
    restart: always
    expose:
      - "8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db2:5432/midterm-domain2
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SERVER_SERVLET_CONTEXT_PATH=/domain2
      - SERVER_FORWARD_HEADERS_STRATEGY=FRAMEWORK
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      db2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.domain-2.rule=Host(`truongvinhkhuong.io.vn`) && PathPrefix(`/domain2`)"
      - "traefik.http.routers.domain-2.entrypoints=websecure"
      - "traefik.http.routers.domain-2.tls.certresolver=myresolver"
      - "traefik.http.services.domain-2.loadbalancer.server.port=8082"
      - "traefik.http.middlewares.domain2-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.domain2-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.domain2-cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.domain2-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.routers.domain-2.middlewares=domain2-cors"

  kitchen-domain:
    build:
      context: .
      dockerfile: kitchen-domain/Dockerfile
    container_name: kitchen-domain
    restart: always
    expose:
      - "8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db2:5432/midterm-domain2
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SERVER_PORT=8083
      - SERVER_SERVLET_CONTEXT_PATH=/kitchen
      - SERVER_FORWARD_HEADERS_STRATEGY=FRAMEWORK
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    depends_on:
      db2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      domain-2:
        condition: service_healthy
    networks:
      - app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kitchen-domain.rule=Host(`truongvinhkhuong.io.vn`) && PathPrefix(`/kitchen`)"
      - "traefik.http.routers.kitchen-domain.entrypoints=websecure"
      - "traefik.http.routers.kitchen-domain.tls.certresolver=myresolver"
      - "traefik.http.services.kitchen-domain.loadbalancer.server.port=8083"
      - "traefik.http.middlewares.kitchen-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.kitchen-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.kitchen-cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.kitchen-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.routers.kitchen-domain.middlewares=kitchen-cors"

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    expose:
      - "6379"
    networks:
      - app-net
    volumes:
      - redisdata:/data

  smart-order-fe:
    build:
      context: ./smart-order-fe
      dockerfile: Dockerfile
    container_name: smart-order-fe
    restart: always
    expose:
      - "80"
    environment:
      - API_URL=https://truongvinhkhuong.io.vn
      - IDENTITY_API_PATH=/identity
      - DOMAIN2_API_PATH=/domain2
      - KITCHEN_API_PATH=/kitchen
    networks:
      - app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`truongvinhkhuong.io.vn`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.middlewares.fe-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.fe-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.fe-cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
